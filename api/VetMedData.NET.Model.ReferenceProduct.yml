### YamlMime:ManagedReference
items:
- uid: VetMedData.NET.Model.ReferenceProduct
  commentId: T:VetMedData.NET.Model.ReferenceProduct
  id: ReferenceProduct
  parent: VetMedData.NET.Model
  children:
  - VetMedData.NET.Model.ReferenceProduct.ActiveSubstances
  - VetMedData.NET.Model.ReferenceProduct.AuthorisationRoute
  - VetMedData.NET.Model.ReferenceProduct.DateOfIssue
  - VetMedData.NET.Model.ReferenceProduct.GetProductActiveRange
  - VetMedData.NET.Model.ReferenceProduct.MAHolder
  - VetMedData.NET.Model.ReferenceProduct.TargetSpecies
  - VetMedData.NET.Model.ReferenceProduct.TargetSpeciesTyped
  - VetMedData.NET.Model.ReferenceProduct.ToString
  - VetMedData.NET.Model.ReferenceProduct.VMNo
  langs:
  - csharp
  - vb
  name: ReferenceProduct
  nameWithType: ReferenceProduct
  fullName: VetMedData.NET.Model.ReferenceProduct
  type: Class
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: ReferenceProduct
    path: Model/VMDPID.cs
    startLine: 94
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  summary: "\nDefines properties common to all reference product types\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public abstract class ReferenceProduct : Product
    content.vb: >-
      <Serializable>

      Public MustInherit Class ReferenceProduct
          Inherits Product
  inheritance:
  - System.Object
  - VetMedData.NET.Model.Product
  derivedClasses:
  - VetMedData.NET.Model.CurrentlyAuthorisedProduct
  - VetMedData.NET.Model.ExpiredProduct
  - VetMedData.NET.Model.HomoeopathicProduct
  - VetMedData.NET.Model.SuspendedProduct
  inheritedMembers:
  - VetMedData.NET.Model.Product.Name
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - VetMedData.NET.Model.Product.VetMedData.NET.ProductMatching.ProductExtensions.GetCleanedName(VetMedData.NET.ProductMatching.NameCleaningConfig)
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: VetMedData.NET.Model.ReferenceProduct.MAHolder
  commentId: P:VetMedData.NET.Model.ReferenceProduct.MAHolder
  id: MAHolder
  parent: VetMedData.NET.Model.ReferenceProduct
  langs:
  - csharp
  - vb
  name: MAHolder
  nameWithType: ReferenceProduct.MAHolder
  fullName: VetMedData.NET.Model.ReferenceProduct.MAHolder
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: MAHolder
    path: Model/VMDPID.cs
    startLine: 97
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public string MAHolder { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property MAHolder As String
  overload: VetMedData.NET.Model.ReferenceProduct.MAHolder*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.Model.ReferenceProduct.VMNo
  commentId: P:VetMedData.NET.Model.ReferenceProduct.VMNo
  id: VMNo
  parent: VetMedData.NET.Model.ReferenceProduct
  langs:
  - csharp
  - vb
  name: VMNo
  nameWithType: ReferenceProduct.VMNo
  fullName: VetMedData.NET.Model.ReferenceProduct.VMNo
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: VMNo
    path: Model/VMDPID.cs
    startLine: 98
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public string VMNo { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property VMNo As String
  overload: VetMedData.NET.Model.ReferenceProduct.VMNo*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.Model.ReferenceProduct.AuthorisationRoute
  commentId: P:VetMedData.NET.Model.ReferenceProduct.AuthorisationRoute
  id: AuthorisationRoute
  parent: VetMedData.NET.Model.ReferenceProduct
  langs:
  - csharp
  - vb
  name: AuthorisationRoute
  nameWithType: ReferenceProduct.AuthorisationRoute
  fullName: VetMedData.NET.Model.ReferenceProduct.AuthorisationRoute
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: AuthorisationRoute
    path: Model/VMDPID.cs
    startLine: 99
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public string AuthorisationRoute { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property AuthorisationRoute As String
  overload: VetMedData.NET.Model.ReferenceProduct.AuthorisationRoute*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.Model.ReferenceProduct.TargetSpecies
  commentId: P:VetMedData.NET.Model.ReferenceProduct.TargetSpecies
  id: TargetSpecies
  parent: VetMedData.NET.Model.ReferenceProduct
  langs:
  - csharp
  - vb
  name: TargetSpecies
  nameWithType: ReferenceProduct.TargetSpecies
  fullName: VetMedData.NET.Model.ReferenceProduct.TargetSpecies
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: TargetSpecies
    path: Model/VMDPID.cs
    startLine: 100
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public IEnumerable<string> TargetSpecies { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public Property TargetSpecies As IEnumerable(Of String)
  overload: VetMedData.NET.Model.ReferenceProduct.TargetSpecies*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.Model.ReferenceProduct.ActiveSubstances
  commentId: P:VetMedData.NET.Model.ReferenceProduct.ActiveSubstances
  id: ActiveSubstances
  parent: VetMedData.NET.Model.ReferenceProduct
  langs:
  - csharp
  - vb
  name: ActiveSubstances
  nameWithType: ReferenceProduct.ActiveSubstances
  fullName: VetMedData.NET.Model.ReferenceProduct.ActiveSubstances
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: ActiveSubstances
    path: Model/VMDPID.cs
    startLine: 101
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public IEnumerable<string> ActiveSubstances { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public Property ActiveSubstances As IEnumerable(Of String)
  overload: VetMedData.NET.Model.ReferenceProduct.ActiveSubstances*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.Model.ReferenceProduct.TargetSpeciesTyped
  commentId: P:VetMedData.NET.Model.ReferenceProduct.TargetSpeciesTyped
  id: TargetSpeciesTyped
  parent: VetMedData.NET.Model.ReferenceProduct
  langs:
  - csharp
  - vb
  name: TargetSpeciesTyped
  nameWithType: ReferenceProduct.TargetSpeciesTyped
  fullName: VetMedData.NET.Model.ReferenceProduct.TargetSpeciesTyped
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: TargetSpeciesTyped
    path: Model/VMDPID.cs
    startLine: 102
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public IEnumerable<TargetSpecies> TargetSpeciesTyped { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VetMedData.NET.Model.TargetSpecies}
    content.vb: Public Property TargetSpeciesTyped As IEnumerable(Of TargetSpecies)
  overload: VetMedData.NET.Model.ReferenceProduct.TargetSpeciesTyped*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.Model.ReferenceProduct.DateOfIssue
  commentId: P:VetMedData.NET.Model.ReferenceProduct.DateOfIssue
  id: DateOfIssue
  parent: VetMedData.NET.Model.ReferenceProduct
  langs:
  - csharp
  - vb
  name: DateOfIssue
  nameWithType: ReferenceProduct.DateOfIssue
  fullName: VetMedData.NET.Model.ReferenceProduct.DateOfIssue
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: DateOfIssue
    path: Model/VMDPID.cs
    startLine: 103
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public DateTime DateOfIssue { get; set; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: Public Property DateOfIssue As Date
  overload: VetMedData.NET.Model.ReferenceProduct.DateOfIssue*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.Model.ReferenceProduct.ToString
  commentId: M:VetMedData.NET.Model.ReferenceProduct.ToString
  id: ToString
  parent: VetMedData.NET.Model.ReferenceProduct
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: ReferenceProduct.ToString()
  fullName: VetMedData.NET.Model.ReferenceProduct.ToString()
  type: Method
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: ToString
    path: Model/VMDPID.cs
    startLine: 105
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public override string ToString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToString As String
  overridden: System.Object.ToString
  overload: VetMedData.NET.Model.ReferenceProduct.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VetMedData.NET.Model.ReferenceProduct.GetProductActiveRange
  commentId: M:VetMedData.NET.Model.ReferenceProduct.GetProductActiveRange
  id: GetProductActiveRange
  parent: VetMedData.NET.Model.ReferenceProduct
  langs:
  - csharp
  - vb
  name: GetProductActiveRange()
  nameWithType: ReferenceProduct.GetProductActiveRange()
  fullName: VetMedData.NET.Model.ReferenceProduct.GetProductActiveRange()
  type: Method
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: GetProductActiveRange
    path: Model/VMDPID.cs
    startLine: 110
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public Tuple<DateTime, DateTime> GetProductActiveRange()
    return:
      type: System.Tuple{System.DateTime,System.DateTime}
    content.vb: Public Function GetProductActiveRange As Tuple(Of Date, Date)
  overload: VetMedData.NET.Model.ReferenceProduct.GetProductActiveRange*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: VetMedData.NET.Model
  commentId: N:VetMedData.NET.Model
  name: VetMedData.NET.Model
  nameWithType: VetMedData.NET.Model
  fullName: VetMedData.NET.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: VetMedData.NET.Model.Product
  commentId: T:VetMedData.NET.Model.Product
  parent: VetMedData.NET.Model
  name: Product
  nameWithType: Product
  fullName: VetMedData.NET.Model.Product
- uid: VetMedData.NET.Model.Product.Name
  commentId: P:VetMedData.NET.Model.Product.Name
  parent: VetMedData.NET.Model.Product
  name: Name
  nameWithType: Product.Name
  fullName: VetMedData.NET.Model.Product.Name
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VetMedData.NET.Model.Product.VetMedData.NET.ProductMatching.ProductExtensions.GetCleanedName(VetMedData.NET.ProductMatching.NameCleaningConfig)
  commentId: M:VetMedData.NET.ProductMatching.ProductExtensions.GetCleanedName(VetMedData.NET.Model.Product,VetMedData.NET.ProductMatching.NameCleaningConfig)
  parent: VetMedData.NET.ProductMatching.ProductExtensions
  definition: VetMedData.NET.ProductMatching.ProductExtensions.GetCleanedName(VetMedData.NET.Model.Product,VetMedData.NET.ProductMatching.NameCleaningConfig)
  name: GetCleanedName(NameCleaningConfig)
  nameWithType: ProductExtensions.GetCleanedName(NameCleaningConfig)
  fullName: VetMedData.NET.ProductMatching.ProductExtensions.GetCleanedName(VetMedData.NET.ProductMatching.NameCleaningConfig)
  spec.csharp:
  - uid: VetMedData.NET.ProductMatching.ProductExtensions.GetCleanedName(VetMedData.NET.ProductMatching.NameCleaningConfig)
    name: GetCleanedName
    nameWithType: ProductExtensions.GetCleanedName
    fullName: VetMedData.NET.ProductMatching.ProductExtensions.GetCleanedName
  - name: (
    nameWithType: (
    fullName: (
  - uid: VetMedData.NET.ProductMatching.NameCleaningConfig
    name: NameCleaningConfig
    nameWithType: NameCleaningConfig
    fullName: VetMedData.NET.ProductMatching.NameCleaningConfig
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VetMedData.NET.ProductMatching.ProductExtensions.GetCleanedName(VetMedData.NET.ProductMatching.NameCleaningConfig)
    name: GetCleanedName
    nameWithType: ProductExtensions.GetCleanedName
    fullName: VetMedData.NET.ProductMatching.ProductExtensions.GetCleanedName
  - name: (
    nameWithType: (
    fullName: (
  - uid: VetMedData.NET.ProductMatching.NameCleaningConfig
    name: NameCleaningConfig
    nameWithType: NameCleaningConfig
    fullName: VetMedData.NET.ProductMatching.NameCleaningConfig
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VetMedData.NET.ProductMatching.ProductExtensions.GetCleanedName(VetMedData.NET.Model.Product,VetMedData.NET.ProductMatching.NameCleaningConfig)
  commentId: M:VetMedData.NET.ProductMatching.ProductExtensions.GetCleanedName(VetMedData.NET.Model.Product,VetMedData.NET.ProductMatching.NameCleaningConfig)
  name: GetCleanedName(Product, NameCleaningConfig)
  nameWithType: ProductExtensions.GetCleanedName(Product, NameCleaningConfig)
  fullName: VetMedData.NET.ProductMatching.ProductExtensions.GetCleanedName(VetMedData.NET.Model.Product, VetMedData.NET.ProductMatching.NameCleaningConfig)
  spec.csharp:
  - uid: VetMedData.NET.ProductMatching.ProductExtensions.GetCleanedName(VetMedData.NET.Model.Product,VetMedData.NET.ProductMatching.NameCleaningConfig)
    name: GetCleanedName
    nameWithType: ProductExtensions.GetCleanedName
    fullName: VetMedData.NET.ProductMatching.ProductExtensions.GetCleanedName
  - name: (
    nameWithType: (
    fullName: (
  - uid: VetMedData.NET.Model.Product
    name: Product
    nameWithType: Product
    fullName: VetMedData.NET.Model.Product
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VetMedData.NET.ProductMatching.NameCleaningConfig
    name: NameCleaningConfig
    nameWithType: NameCleaningConfig
    fullName: VetMedData.NET.ProductMatching.NameCleaningConfig
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: VetMedData.NET.ProductMatching.ProductExtensions.GetCleanedName(VetMedData.NET.Model.Product,VetMedData.NET.ProductMatching.NameCleaningConfig)
    name: GetCleanedName
    nameWithType: ProductExtensions.GetCleanedName
    fullName: VetMedData.NET.ProductMatching.ProductExtensions.GetCleanedName
  - name: (
    nameWithType: (
    fullName: (
  - uid: VetMedData.NET.Model.Product
    name: Product
    nameWithType: Product
    fullName: VetMedData.NET.Model.Product
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: VetMedData.NET.ProductMatching.NameCleaningConfig
    name: NameCleaningConfig
    nameWithType: NameCleaningConfig
    fullName: VetMedData.NET.ProductMatching.NameCleaningConfig
  - name: )
    nameWithType: )
    fullName: )
- uid: VetMedData.NET.ProductMatching.ProductExtensions
  commentId: T:VetMedData.NET.ProductMatching.ProductExtensions
  parent: VetMedData.NET.ProductMatching
  name: ProductExtensions
  nameWithType: ProductExtensions
  fullName: VetMedData.NET.ProductMatching.ProductExtensions
- uid: VetMedData.NET.ProductMatching
  commentId: N:VetMedData.NET.ProductMatching
  name: VetMedData.NET.ProductMatching
  nameWithType: VetMedData.NET.ProductMatching
  fullName: VetMedData.NET.ProductMatching
- uid: VetMedData.NET.Model.ReferenceProduct.MAHolder*
  commentId: Overload:VetMedData.NET.Model.ReferenceProduct.MAHolder
  name: MAHolder
  nameWithType: ReferenceProduct.MAHolder
  fullName: VetMedData.NET.Model.ReferenceProduct.MAHolder
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VetMedData.NET.Model.ReferenceProduct.VMNo*
  commentId: Overload:VetMedData.NET.Model.ReferenceProduct.VMNo
  name: VMNo
  nameWithType: ReferenceProduct.VMNo
  fullName: VetMedData.NET.Model.ReferenceProduct.VMNo
- uid: VetMedData.NET.Model.ReferenceProduct.AuthorisationRoute*
  commentId: Overload:VetMedData.NET.Model.ReferenceProduct.AuthorisationRoute
  name: AuthorisationRoute
  nameWithType: ReferenceProduct.AuthorisationRoute
  fullName: VetMedData.NET.Model.ReferenceProduct.AuthorisationRoute
- uid: VetMedData.NET.Model.ReferenceProduct.TargetSpecies*
  commentId: Overload:VetMedData.NET.Model.ReferenceProduct.TargetSpecies
  name: TargetSpecies
  nameWithType: ReferenceProduct.TargetSpecies
  fullName: VetMedData.NET.Model.ReferenceProduct.TargetSpecies
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VetMedData.NET.Model.ReferenceProduct.ActiveSubstances*
  commentId: Overload:VetMedData.NET.Model.ReferenceProduct.ActiveSubstances
  name: ActiveSubstances
  nameWithType: ReferenceProduct.ActiveSubstances
  fullName: VetMedData.NET.Model.ReferenceProduct.ActiveSubstances
- uid: VetMedData.NET.Model.ReferenceProduct.TargetSpeciesTyped*
  commentId: Overload:VetMedData.NET.Model.ReferenceProduct.TargetSpeciesTyped
  name: TargetSpeciesTyped
  nameWithType: ReferenceProduct.TargetSpeciesTyped
  fullName: VetMedData.NET.Model.ReferenceProduct.TargetSpeciesTyped
- uid: System.Collections.Generic.IEnumerable{VetMedData.NET.Model.TargetSpecies}
  commentId: T:System.Collections.Generic.IEnumerable{VetMedData.NET.Model.TargetSpecies}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TargetSpecies>
  nameWithType: IEnumerable<TargetSpecies>
  fullName: System.Collections.Generic.IEnumerable<VetMedData.NET.Model.TargetSpecies>
  nameWithType.vb: IEnumerable(Of TargetSpecies)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VetMedData.NET.Model.TargetSpecies)
  name.vb: IEnumerable(Of TargetSpecies)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VetMedData.NET.Model.TargetSpecies
    name: TargetSpecies
    nameWithType: TargetSpecies
    fullName: VetMedData.NET.Model.TargetSpecies
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VetMedData.NET.Model.TargetSpecies
    name: TargetSpecies
    nameWithType: TargetSpecies
    fullName: VetMedData.NET.Model.TargetSpecies
  - name: )
    nameWithType: )
    fullName: )
- uid: VetMedData.NET.Model.ReferenceProduct.DateOfIssue*
  commentId: Overload:VetMedData.NET.Model.ReferenceProduct.DateOfIssue
  name: DateOfIssue
  nameWithType: ReferenceProduct.DateOfIssue
  fullName: VetMedData.NET.Model.ReferenceProduct.DateOfIssue
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: VetMedData.NET.Model.ReferenceProduct.ToString*
  commentId: Overload:VetMedData.NET.Model.ReferenceProduct.ToString
  name: ToString
  nameWithType: ReferenceProduct.ToString
  fullName: VetMedData.NET.Model.ReferenceProduct.ToString
- uid: VetMedData.NET.Model.ReferenceProduct.GetProductActiveRange*
  commentId: Overload:VetMedData.NET.Model.ReferenceProduct.GetProductActiveRange
  name: GetProductActiveRange
  nameWithType: ReferenceProduct.GetProductActiveRange
  fullName: VetMedData.NET.Model.ReferenceProduct.GetProductActiveRange
- uid: System.Tuple{System.DateTime,System.DateTime}
  commentId: T:System.Tuple{System.DateTime,System.DateTime}
  parent: System
  definition: System.Tuple`2
  name: Tuple<DateTime, DateTime>
  nameWithType: Tuple<DateTime, DateTime>
  fullName: System.Tuple<System.DateTime, System.DateTime>
  nameWithType.vb: Tuple(Of DateTime, DateTime)
  fullName.vb: System.Tuple(Of System.DateTime, System.DateTime)
  name.vb: Tuple(Of DateTime, DateTime)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.DateTime
    name: DateTime
    nameWithType: DateTime
    fullName: System.DateTime
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`2
  commentId: T:System.Tuple`2
  isExternal: true
  name: Tuple<T1, T2>
  nameWithType: Tuple<T1, T2>
  fullName: System.Tuple<T1, T2>
  nameWithType.vb: Tuple(Of T1, T2)
  fullName.vb: System.Tuple(Of T1, T2)
  name.vb: Tuple(Of T1, T2)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
