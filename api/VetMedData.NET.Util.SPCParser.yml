### YamlMime:ManagedReference
items:
- uid: VetMedData.NET.Util.SPCParser
  commentId: T:VetMedData.NET.Util.SPCParser
  id: SPCParser
  parent: VetMedData.NET.Util
  children:
  - VetMedData.NET.Util.SPCParser.GetPlainText(DocumentFormat.OpenXml.OpenXmlElement)
  - VetMedData.NET.Util.SPCParser.GetPlainText(System.String)
  - VetMedData.NET.Util.SPCParser.GetTargetSpecies(DocumentFormat.OpenXml.Packaging.WordprocessingDocument)
  - VetMedData.NET.Util.SPCParser.GetTargetSpecies(System.IO.Stream)
  - VetMedData.NET.Util.SPCParser.GetTargetSpecies(System.String)
  - VetMedData.NET.Util.SPCParser.GetTargetSpeciesFromMultiProductPdf(System.String)
  - VetMedData.NET.Util.SPCParser.GetTargetSpeciesFromPdf(System.String)
  langs:
  - csharp
  - vb
  name: SPCParser
  nameWithType: SPCParser
  fullName: VetMedData.NET.Util.SPCParser
  type: Class
  source:
    remote:
      path: VetMedData.NET/Util/SPCParser.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: SPCParser
    path: Util/SPCParser.cs
    startLine: 17
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Util
  summary: "\nMethods for parsing Summary ReferenceProduct Characteristics documents\nin either VMD (.doc/docx) formats or EMA multi-product pdf formats.\n"
  example: []
  syntax:
    content: public static class SPCParser
    content.vb: Public Module SPCParser
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: VetMedData.NET.Util.SPCParser.GetTargetSpecies(DocumentFormat.OpenXml.Packaging.WordprocessingDocument)
  commentId: M:VetMedData.NET.Util.SPCParser.GetTargetSpecies(DocumentFormat.OpenXml.Packaging.WordprocessingDocument)
  id: GetTargetSpecies(DocumentFormat.OpenXml.Packaging.WordprocessingDocument)
  parent: VetMedData.NET.Util.SPCParser
  langs:
  - csharp
  - vb
  name: GetTargetSpecies(WordprocessingDocument)
  nameWithType: SPCParser.GetTargetSpecies(WordprocessingDocument)
  fullName: VetMedData.NET.Util.SPCParser.GetTargetSpecies(DocumentFormat.OpenXml.Packaging.WordprocessingDocument)
  type: Method
  source:
    remote:
      path: VetMedData.NET/Util/SPCParser.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: GetTargetSpecies
    path: Util/SPCParser.cs
    startLine: 116
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Util
  summary: "\nExtracts target species from .docx <xref href=\"DocumentFormat.OpenXml.Packaging.WordprocessingDocument\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: public static string[] GetTargetSpecies(WordprocessingDocument d)
    parameters:
    - id: d
      type: DocumentFormat.OpenXml.Packaging.WordprocessingDocument
      description: SPC document
    return:
      type: System.String[]
      description: string array of Target Species
    content.vb: Public Shared Function GetTargetSpecies(d As WordprocessingDocument) As String()
  overload: VetMedData.NET.Util.SPCParser.GetTargetSpecies*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VetMedData.NET.Util.SPCParser.GetTargetSpeciesFromPdf(System.String)
  commentId: M:VetMedData.NET.Util.SPCParser.GetTargetSpeciesFromPdf(System.String)
  id: GetTargetSpeciesFromPdf(System.String)
  parent: VetMedData.NET.Util.SPCParser
  langs:
  - csharp
  - vb
  name: GetTargetSpeciesFromPdf(String)
  nameWithType: SPCParser.GetTargetSpeciesFromPdf(String)
  fullName: VetMedData.NET.Util.SPCParser.GetTargetSpeciesFromPdf(System.String)
  type: Method
  source:
    remote:
      path: VetMedData.NET/Util/SPCParser.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: GetTargetSpeciesFromPdf
    path: Util/SPCParser.cs
    startLine: 135
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Util
  summary: "\nExtracts target species from .pdf\n"
  example: []
  syntax:
    content: public static string[] GetTargetSpeciesFromPdf(string pathToPdf)
    parameters:
    - id: pathToPdf
      type: System.String
      description: Path to PDF SPC document
    return:
      type: System.String[]
      description: string array of Target Species
    content.vb: Public Shared Function GetTargetSpeciesFromPdf(pathToPdf As String) As String()
  overload: VetMedData.NET.Util.SPCParser.GetTargetSpeciesFromPdf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VetMedData.NET.Util.SPCParser.GetTargetSpeciesFromMultiProductPdf(System.String)
  commentId: M:VetMedData.NET.Util.SPCParser.GetTargetSpeciesFromMultiProductPdf(System.String)
  id: GetTargetSpeciesFromMultiProductPdf(System.String)
  parent: VetMedData.NET.Util.SPCParser
  langs:
  - csharp
  - vb
  name: GetTargetSpeciesFromMultiProductPdf(String)
  nameWithType: SPCParser.GetTargetSpeciesFromMultiProductPdf(String)
  fullName: VetMedData.NET.Util.SPCParser.GetTargetSpeciesFromMultiProductPdf(System.String)
  type: Method
  source:
    remote:
      path: VetMedData.NET/Util/SPCParser.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: GetTargetSpeciesFromMultiProductPdf
    path: Util/SPCParser.cs
    startLine: 145
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Util
  summary: "\nExtracts names of products and their target species from EMA-format multi-product PDF\n"
  example: []
  syntax:
    content: public static Dictionary<string, string[]> GetTargetSpeciesFromMultiProductPdf(string pathToPdf)
    parameters:
    - id: pathToPdf
      type: System.String
      description: Path to PDF SPC document
    return:
      type: System.Collections.Generic.Dictionary{System.String,System.String[]}
      description: Dictionary of product names and their target species
    content.vb: Public Shared Function GetTargetSpeciesFromMultiProductPdf(pathToPdf As String) As Dictionary(Of String, String())
  overload: VetMedData.NET.Util.SPCParser.GetTargetSpeciesFromMultiProductPdf*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VetMedData.NET.Util.SPCParser.GetTargetSpecies(System.String)
  commentId: M:VetMedData.NET.Util.SPCParser.GetTargetSpecies(System.String)
  id: GetTargetSpecies(System.String)
  parent: VetMedData.NET.Util.SPCParser
  langs:
  - csharp
  - vb
  name: GetTargetSpecies(String)
  nameWithType: SPCParser.GetTargetSpecies(String)
  fullName: VetMedData.NET.Util.SPCParser.GetTargetSpecies(System.String)
  type: Method
  source:
    remote:
      path: VetMedData.NET/Util/SPCParser.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: GetTargetSpecies
    path: Util/SPCParser.cs
    startLine: 214
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Util
  summary: "\nExtracts target species from .docx\n"
  example: []
  syntax:
    content: public static string[] GetTargetSpecies(string pathToSpc)
    parameters:
    - id: pathToSpc
      type: System.String
      description: path to SPC document
    return:
      type: System.String[]
      description: string array of Target Species
    content.vb: Public Shared Function GetTargetSpecies(pathToSpc As String) As String()
  overload: VetMedData.NET.Util.SPCParser.GetTargetSpecies*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VetMedData.NET.Util.SPCParser.GetTargetSpecies(System.IO.Stream)
  commentId: M:VetMedData.NET.Util.SPCParser.GetTargetSpecies(System.IO.Stream)
  id: GetTargetSpecies(System.IO.Stream)
  parent: VetMedData.NET.Util.SPCParser
  langs:
  - csharp
  - vb
  name: GetTargetSpecies(Stream)
  nameWithType: SPCParser.GetTargetSpecies(Stream)
  fullName: VetMedData.NET.Util.SPCParser.GetTargetSpecies(System.IO.Stream)
  type: Method
  source:
    remote:
      path: VetMedData.NET/Util/SPCParser.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: GetTargetSpecies
    path: Util/SPCParser.cs
    startLine: 224
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Util
  summary: "\nExtracts target species from stream of .docx\n"
  example: []
  syntax:
    content: public static string[] GetTargetSpecies(Stream s)
    parameters:
    - id: s
      type: System.IO.Stream
      description: stream of SPC document
    return:
      type: System.String[]
      description: string array of Target Species
    content.vb: Public Shared Function GetTargetSpecies(s As Stream) As String()
  overload: VetMedData.NET.Util.SPCParser.GetTargetSpecies*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VetMedData.NET.Util.SPCParser.GetPlainText(System.String)
  commentId: M:VetMedData.NET.Util.SPCParser.GetPlainText(System.String)
  id: GetPlainText(System.String)
  parent: VetMedData.NET.Util.SPCParser
  langs:
  - csharp
  - vb
  name: GetPlainText(String)
  nameWithType: SPCParser.GetPlainText(String)
  fullName: VetMedData.NET.Util.SPCParser.GetPlainText(System.String)
  type: Method
  source:
    remote:
      path: VetMedData.NET/Util/SPCParser.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: GetPlainText
    path: Util/SPCParser.cs
    startLine: 237
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Util
  summary: "\nUses <xref href=\"iTextSharp\" data-throw-if-not-resolved=\"false\"></xref> library to extract plaintext\nfrom pdf file.\n"
  example: []
  syntax:
    content: public static string GetPlainText(string pathToPdf)
    parameters:
    - id: pathToPdf
      type: System.String
      description: Path to PDF file
    return:
      type: System.String
      description: Plaintext string
    content.vb: Public Shared Function GetPlainText(pathToPdf As String) As String
  overload: VetMedData.NET.Util.SPCParser.GetPlainText*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: VetMedData.NET.Util.SPCParser.GetPlainText(DocumentFormat.OpenXml.OpenXmlElement)
  commentId: M:VetMedData.NET.Util.SPCParser.GetPlainText(DocumentFormat.OpenXml.OpenXmlElement)
  id: GetPlainText(DocumentFormat.OpenXml.OpenXmlElement)
  parent: VetMedData.NET.Util.SPCParser
  langs:
  - csharp
  - vb
  name: GetPlainText(OpenXmlElement)
  nameWithType: SPCParser.GetPlainText(OpenXmlElement)
  fullName: VetMedData.NET.Util.SPCParser.GetPlainText(DocumentFormat.OpenXml.OpenXmlElement)
  type: Method
  source:
    remote:
      path: VetMedData.NET/Util/SPCParser.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: GetPlainText
    path: Util/SPCParser.cs
    startLine: 321
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Util
  summary: "\nRead Plain Text in all <xref href=\"DocumentFormat.OpenXml.OpenXmlElement\" data-throw-if-not-resolved=\"false\"></xref>s of word document\nTaken from https://code.msdn.microsoft.com/office/CSOpenXmlGetPlainText-554918c3\nMS-PL Licensed\n"
  example: []
  syntax:
    content: public static string GetPlainText(OpenXmlElement element)
    parameters:
    - id: element
      type: DocumentFormat.OpenXml.OpenXmlElement
      description: OpenXmlElement in document
    return:
      type: System.String
      description: Plain Text within XmlElement
    content.vb: Public Shared Function GetPlainText(element As OpenXmlElement) As String
  overload: VetMedData.NET.Util.SPCParser.GetPlainText*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: VetMedData.NET.Util
  commentId: N:VetMedData.NET.Util
  name: VetMedData.NET.Util
  nameWithType: VetMedData.NET.Util
  fullName: VetMedData.NET.Util
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: DocumentFormat.OpenXml.Packaging.WordprocessingDocument
  commentId: T:DocumentFormat.OpenXml.Packaging.WordprocessingDocument
  parent: DocumentFormat.OpenXml.Packaging
  isExternal: true
  name: WordprocessingDocument
  nameWithType: WordprocessingDocument
  fullName: DocumentFormat.OpenXml.Packaging.WordprocessingDocument
- uid: VetMedData.NET.Util.SPCParser.GetTargetSpecies*
  commentId: Overload:VetMedData.NET.Util.SPCParser.GetTargetSpecies
  name: GetTargetSpecies
  nameWithType: SPCParser.GetTargetSpecies
  fullName: VetMedData.NET.Util.SPCParser.GetTargetSpecies
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: DocumentFormat.OpenXml.Packaging
  commentId: N:DocumentFormat.OpenXml.Packaging
  isExternal: true
  name: DocumentFormat.OpenXml.Packaging
  nameWithType: DocumentFormat.OpenXml.Packaging
  fullName: DocumentFormat.OpenXml.Packaging
- uid: VetMedData.NET.Util.SPCParser.GetTargetSpeciesFromPdf*
  commentId: Overload:VetMedData.NET.Util.SPCParser.GetTargetSpeciesFromPdf
  name: GetTargetSpeciesFromPdf
  nameWithType: SPCParser.GetTargetSpeciesFromPdf
  fullName: VetMedData.NET.Util.SPCParser.GetTargetSpeciesFromPdf
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VetMedData.NET.Util.SPCParser.GetTargetSpeciesFromMultiProductPdf*
  commentId: Overload:VetMedData.NET.Util.SPCParser.GetTargetSpeciesFromMultiProductPdf
  name: GetTargetSpeciesFromMultiProductPdf
  nameWithType: SPCParser.GetTargetSpeciesFromMultiProductPdf
  fullName: VetMedData.NET.Util.SPCParser.GetTargetSpeciesFromMultiProductPdf
- uid: System.Collections.Generic.Dictionary{System.String,System.String[]}
  commentId: T:System.Collections.Generic.Dictionary{System.String,System.String[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.Dictionary`2
  name: Dictionary<String, String[]>
  nameWithType: Dictionary<String, String[]>
  fullName: System.Collections.Generic.Dictionary<System.String, System.String[]>
  nameWithType.vb: Dictionary(Of String, String())
  fullName.vb: System.Collections.Generic.Dictionary(Of System.String, System.String())
  name.vb: Dictionary(Of String, String())
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.Dictionary`2
  commentId: T:System.Collections.Generic.Dictionary`2
  isExternal: true
  name: Dictionary<TKey, TValue>
  nameWithType: Dictionary<TKey, TValue>
  fullName: System.Collections.Generic.Dictionary<TKey, TValue>
  nameWithType.vb: Dictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.Dictionary(Of TKey, TValue)
  name.vb: Dictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: System.Collections.Generic.Dictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: true
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: iTextSharp
  commentId: N:iTextSharp
  isExternal: true
- uid: VetMedData.NET.Util.SPCParser.GetPlainText*
  commentId: Overload:VetMedData.NET.Util.SPCParser.GetPlainText
  name: GetPlainText
  nameWithType: SPCParser.GetPlainText
  fullName: VetMedData.NET.Util.SPCParser.GetPlainText
- uid: DocumentFormat.OpenXml.OpenXmlElement
  commentId: T:DocumentFormat.OpenXml.OpenXmlElement
  parent: DocumentFormat.OpenXml
  isExternal: true
  name: OpenXmlElement
  nameWithType: OpenXmlElement
  fullName: DocumentFormat.OpenXml.OpenXmlElement
- uid: DocumentFormat.OpenXml
  commentId: N:DocumentFormat.OpenXml
  isExternal: true
  name: DocumentFormat.OpenXml
  nameWithType: DocumentFormat.OpenXml
  fullName: DocumentFormat.OpenXml
