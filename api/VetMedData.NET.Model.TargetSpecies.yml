### YamlMime:ManagedReference
items:
- uid: VetMedData.NET.Model.TargetSpecies
  commentId: T:VetMedData.NET.Model.TargetSpecies
  id: TargetSpecies
  parent: VetMedData.NET.Model
  children:
  - VetMedData.NET.Model.TargetSpecies.All
  - VetMedData.NET.Model.TargetSpecies.CanonicalName
  - VetMedData.NET.Model.TargetSpecies.Equals(System.Object)
  - VetMedData.NET.Model.TargetSpecies.Find(System.String)
  - VetMedData.NET.Model.TargetSpecies.Names
  - VetMedData.NET.Model.TargetSpecies.Synonyms
  langs:
  - csharp
  - vb
  name: TargetSpecies
  nameWithType: TargetSpecies
  fullName: VetMedData.NET.Model.TargetSpecies
  type: Class
  source:
    remote:
      path: VetMedData.NET/Model/TargetSpecies.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: TargetSpecies
    path: Model/TargetSpecies.cs
    startLine: 6
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: >-
      [Serializable]

      public class TargetSpecies
    content.vb: >-
      <Serializable>

      Public Class TargetSpecies
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VetMedData.NET.Model.TargetSpecies.CanonicalName
  commentId: P:VetMedData.NET.Model.TargetSpecies.CanonicalName
  id: CanonicalName
  parent: VetMedData.NET.Model.TargetSpecies
  langs:
  - csharp
  - vb
  name: CanonicalName
  nameWithType: TargetSpecies.CanonicalName
  fullName: VetMedData.NET.Model.TargetSpecies.CanonicalName
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/TargetSpecies.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: CanonicalName
    path: Model/TargetSpecies.cs
    startLine: 9
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public string CanonicalName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property CanonicalName As String
  overload: VetMedData.NET.Model.TargetSpecies.CanonicalName*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.Model.TargetSpecies.Synonyms
  commentId: P:VetMedData.NET.Model.TargetSpecies.Synonyms
  id: Synonyms
  parent: VetMedData.NET.Model.TargetSpecies
  langs:
  - csharp
  - vb
  name: Synonyms
  nameWithType: TargetSpecies.Synonyms
  fullName: VetMedData.NET.Model.TargetSpecies.Synonyms
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/TargetSpecies.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: Synonyms
    path: Model/TargetSpecies.cs
    startLine: 10
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public string[] Synonyms { get; set; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public Property Synonyms As String()
  overload: VetMedData.NET.Model.TargetSpecies.Synonyms*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.Model.TargetSpecies.Names
  commentId: P:VetMedData.NET.Model.TargetSpecies.Names
  id: Names
  parent: VetMedData.NET.Model.TargetSpecies
  langs:
  - csharp
  - vb
  name: Names
  nameWithType: TargetSpecies.Names
  fullName: VetMedData.NET.Model.TargetSpecies.Names
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/TargetSpecies.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: Names
    path: Model/TargetSpecies.cs
    startLine: 11
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public string[] Names { get; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public ReadOnly Property Names As String()
  overload: VetMedData.NET.Model.TargetSpecies.Names*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VetMedData.NET.Model.TargetSpecies.Equals(System.Object)
  commentId: M:VetMedData.NET.Model.TargetSpecies.Equals(System.Object)
  id: Equals(System.Object)
  parent: VetMedData.NET.Model.TargetSpecies
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: TargetSpecies.Equals(Object)
  fullName: VetMedData.NET.Model.TargetSpecies.Equals(System.Object)
  type: Method
  source:
    remote:
      path: VetMedData.NET/Model/TargetSpecies.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: Equals
    path: Model/TargetSpecies.cs
    startLine: 14
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public override bool Equals(object obj)
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
  overridden: System.Object.Equals(System.Object)
  overload: VetMedData.NET.Model.TargetSpecies.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: VetMedData.NET.Model.TargetSpecies.All
  commentId: P:VetMedData.NET.Model.TargetSpecies.All
  id: All
  parent: VetMedData.NET.Model.TargetSpecies
  langs:
  - csharp
  - vb
  name: All
  nameWithType: TargetSpecies.All
  fullName: VetMedData.NET.Model.TargetSpecies.All
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/TargetSpecies.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: All
    path: Model/TargetSpecies.cs
    startLine: 20
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public static IEnumerable<TargetSpecies> All { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VetMedData.NET.Model.TargetSpecies}
    content.vb: Public Shared ReadOnly Property All As IEnumerable(Of TargetSpecies)
  overload: VetMedData.NET.Model.TargetSpecies.All*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: VetMedData.NET.Model.TargetSpecies.Find(System.String)
  commentId: M:VetMedData.NET.Model.TargetSpecies.Find(System.String)
  id: Find(System.String)
  parent: VetMedData.NET.Model.TargetSpecies
  langs:
  - csharp
  - vb
  name: Find(String)
  nameWithType: TargetSpecies.Find(String)
  fullName: VetMedData.NET.Model.TargetSpecies.Find(System.String)
  type: Method
  source:
    remote:
      path: VetMedData.NET/Model/TargetSpecies.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: Find
    path: Model/TargetSpecies.cs
    startLine: 167
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public static IEnumerable<TargetSpecies> Find(string instr)
    parameters:
    - id: instr
      type: System.String
    return:
      type: System.Collections.Generic.IEnumerable{VetMedData.NET.Model.TargetSpecies}
    content.vb: Public Shared Function Find(instr As String) As IEnumerable(Of TargetSpecies)
  overload: VetMedData.NET.Model.TargetSpecies.Find*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: VetMedData.NET.Model
  commentId: N:VetMedData.NET.Model
  name: VetMedData.NET.Model
  nameWithType: VetMedData.NET.Model
  fullName: VetMedData.NET.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VetMedData.NET.Model.TargetSpecies.CanonicalName*
  commentId: Overload:VetMedData.NET.Model.TargetSpecies.CanonicalName
  name: CanonicalName
  nameWithType: TargetSpecies.CanonicalName
  fullName: VetMedData.NET.Model.TargetSpecies.CanonicalName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: VetMedData.NET.Model.TargetSpecies.Synonyms*
  commentId: Overload:VetMedData.NET.Model.TargetSpecies.Synonyms
  name: Synonyms
  nameWithType: TargetSpecies.Synonyms
  fullName: VetMedData.NET.Model.TargetSpecies.Synonyms
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: VetMedData.NET.Model.TargetSpecies.Names*
  commentId: Overload:VetMedData.NET.Model.TargetSpecies.Names
  name: Names
  nameWithType: TargetSpecies.Names
  fullName: VetMedData.NET.Model.TargetSpecies.Names
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VetMedData.NET.Model.TargetSpecies.Equals*
  commentId: Overload:VetMedData.NET.Model.TargetSpecies.Equals
  name: Equals
  nameWithType: TargetSpecies.Equals
  fullName: VetMedData.NET.Model.TargetSpecies.Equals
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VetMedData.NET.Model.TargetSpecies.All*
  commentId: Overload:VetMedData.NET.Model.TargetSpecies.All
  name: All
  nameWithType: TargetSpecies.All
  fullName: VetMedData.NET.Model.TargetSpecies.All
- uid: System.Collections.Generic.IEnumerable{VetMedData.NET.Model.TargetSpecies}
  commentId: T:System.Collections.Generic.IEnumerable{VetMedData.NET.Model.TargetSpecies}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TargetSpecies>
  nameWithType: IEnumerable<TargetSpecies>
  fullName: System.Collections.Generic.IEnumerable<VetMedData.NET.Model.TargetSpecies>
  nameWithType.vb: IEnumerable(Of TargetSpecies)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VetMedData.NET.Model.TargetSpecies)
  name.vb: IEnumerable(Of TargetSpecies)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VetMedData.NET.Model.TargetSpecies
    name: TargetSpecies
    nameWithType: TargetSpecies
    fullName: VetMedData.NET.Model.TargetSpecies
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VetMedData.NET.Model.TargetSpecies
    name: TargetSpecies
    nameWithType: TargetSpecies
    fullName: VetMedData.NET.Model.TargetSpecies
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VetMedData.NET.Model.TargetSpecies.Find*
  commentId: Overload:VetMedData.NET.Model.TargetSpecies.Find
  name: Find
  nameWithType: TargetSpecies.Find
  fullName: VetMedData.NET.Model.TargetSpecies.Find
