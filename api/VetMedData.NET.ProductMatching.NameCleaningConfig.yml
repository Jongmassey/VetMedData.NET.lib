### YamlMime:ManagedReference
items:
- uid: VetMedData.NET.ProductMatching.NameCleaningConfig
  commentId: T:VetMedData.NET.ProductMatching.NameCleaningConfig
  id: NameCleaningConfig
  parent: VetMedData.NET.ProductMatching
  children:
  - VetMedData.NET.ProductMatching.NameCleaningConfig.CharsToRemove
  - VetMedData.NET.ProductMatching.NameCleaningConfig.Lowercase
  - VetMedData.NET.ProductMatching.NameCleaningConfig.PatternsToRemove
  - VetMedData.NET.ProductMatching.NameCleaningConfig.RemoveBracketedTerms
  - VetMedData.NET.ProductMatching.NameCleaningConfig.RemoveLeadingMultiplierTerms
  - VetMedData.NET.ProductMatching.NameCleaningConfig.TermsToRemove
  langs:
  - csharp
  - vb
  name: NameCleaningConfig
  nameWithType: NameCleaningConfig
  fullName: VetMedData.NET.ProductMatching.NameCleaningConfig
  type: Class
  source:
    remote:
      path: VetMedData.NET/ProductMatching/NameCleaningConfig.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: NameCleaningConfig
    path: ProductMatching/NameCleaningConfig.cs
    startLine: 20
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.ProductMatching
  summary: "\nSet of rules for cleaning veterinary medicine names\n"
  example: []
  syntax:
    content: public abstract class NameCleaningConfig
    content.vb: Public MustInherit Class NameCleaningConfig
  inheritance:
  - System.Object
  derivedClasses:
  - VetMedData.NET.ProductMatching.DefaultMatchNameCleaningConfig
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: VetMedData.NET.ProductMatching.NameCleaningConfig.Lowercase
  commentId: P:VetMedData.NET.ProductMatching.NameCleaningConfig.Lowercase
  id: Lowercase
  parent: VetMedData.NET.ProductMatching.NameCleaningConfig
  langs:
  - csharp
  - vb
  name: Lowercase
  nameWithType: NameCleaningConfig.Lowercase
  fullName: VetMedData.NET.ProductMatching.NameCleaningConfig.Lowercase
  type: Property
  source:
    remote:
      path: VetMedData.NET/ProductMatching/NameCleaningConfig.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: Lowercase
    path: ProductMatching/NameCleaningConfig.cs
    startLine: 25
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.ProductMatching
  summary: "\nSet name to lowercase\n"
  example: []
  syntax:
    content: public bool Lowercase { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property Lowercase As Boolean
  overload: VetMedData.NET.ProductMatching.NameCleaningConfig.Lowercase*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.ProductMatching.NameCleaningConfig.RemoveBracketedTerms
  commentId: P:VetMedData.NET.ProductMatching.NameCleaningConfig.RemoveBracketedTerms
  id: RemoveBracketedTerms
  parent: VetMedData.NET.ProductMatching.NameCleaningConfig
  langs:
  - csharp
  - vb
  name: RemoveBracketedTerms
  nameWithType: NameCleaningConfig.RemoveBracketedTerms
  fullName: VetMedData.NET.ProductMatching.NameCleaningConfig.RemoveBracketedTerms
  type: Property
  source:
    remote:
      path: VetMedData.NET/ProductMatching/NameCleaningConfig.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: RemoveBracketedTerms
    path: ProductMatching/NameCleaningConfig.cs
    startLine: 30
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.ProductMatching
  summary: "\nRemove terms contained within [] () including\nleading/trailing spaces\n"
  example: []
  syntax:
    content: public bool RemoveBracketedTerms { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property RemoveBracketedTerms As Boolean
  overload: VetMedData.NET.ProductMatching.NameCleaningConfig.RemoveBracketedTerms*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.ProductMatching.NameCleaningConfig.CharsToRemove
  commentId: P:VetMedData.NET.ProductMatching.NameCleaningConfig.CharsToRemove
  id: CharsToRemove
  parent: VetMedData.NET.ProductMatching.NameCleaningConfig
  langs:
  - csharp
  - vb
  name: CharsToRemove
  nameWithType: NameCleaningConfig.CharsToRemove
  fullName: VetMedData.NET.ProductMatching.NameCleaningConfig.CharsToRemove
  type: Property
  source:
    remote:
      path: VetMedData.NET/ProductMatching/NameCleaningConfig.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: CharsToRemove
    path: ProductMatching/NameCleaningConfig.cs
    startLine: 35
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.ProductMatching
  summary: "\nSingle characters to be removed at any point in\nname.\n"
  example: []
  syntax:
    content: public char[] CharsToRemove { get; set; }
    parameters: []
    return:
      type: System.Char[]
    content.vb: Public Property CharsToRemove As Char()
  overload: VetMedData.NET.ProductMatching.NameCleaningConfig.CharsToRemove*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.ProductMatching.NameCleaningConfig.TermsToRemove
  commentId: P:VetMedData.NET.ProductMatching.NameCleaningConfig.TermsToRemove
  id: TermsToRemove
  parent: VetMedData.NET.ProductMatching.NameCleaningConfig
  langs:
  - csharp
  - vb
  name: TermsToRemove
  nameWithType: NameCleaningConfig.TermsToRemove
  fullName: VetMedData.NET.ProductMatching.NameCleaningConfig.TermsToRemove
  type: Property
  source:
    remote:
      path: VetMedData.NET/ProductMatching/NameCleaningConfig.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: TermsToRemove
    path: ProductMatching/NameCleaningConfig.cs
    startLine: 40
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.ProductMatching
  summary: "\nTerms to be removed so long as they are bounded\nby a word-boundary (space, punctuation, start/end of string)\n"
  example: []
  syntax:
    content: public string[] TermsToRemove { get; set; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public Property TermsToRemove As String()
  overload: VetMedData.NET.ProductMatching.NameCleaningConfig.TermsToRemove*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.ProductMatching.NameCleaningConfig.PatternsToRemove
  commentId: P:VetMedData.NET.ProductMatching.NameCleaningConfig.PatternsToRemove
  id: PatternsToRemove
  parent: VetMedData.NET.ProductMatching.NameCleaningConfig
  langs:
  - csharp
  - vb
  name: PatternsToRemove
  nameWithType: NameCleaningConfig.PatternsToRemove
  fullName: VetMedData.NET.ProductMatching.NameCleaningConfig.PatternsToRemove
  type: Property
  source:
    remote:
      path: VetMedData.NET/ProductMatching/NameCleaningConfig.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: PatternsToRemove
    path: ProductMatching/NameCleaningConfig.cs
    startLine: 44
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.ProductMatching
  summary: "\nRegular expression patterns for removal\n"
  example: []
  syntax:
    content: public string[] PatternsToRemove { get; set; }
    parameters: []
    return:
      type: System.String[]
    content.vb: Public Property PatternsToRemove As String()
  overload: VetMedData.NET.ProductMatching.NameCleaningConfig.PatternsToRemove*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.ProductMatching.NameCleaningConfig.RemoveLeadingMultiplierTerms
  commentId: P:VetMedData.NET.ProductMatching.NameCleaningConfig.RemoveLeadingMultiplierTerms
  id: RemoveLeadingMultiplierTerms
  parent: VetMedData.NET.ProductMatching.NameCleaningConfig
  langs:
  - csharp
  - vb
  name: RemoveLeadingMultiplierTerms
  nameWithType: NameCleaningConfig.RemoveLeadingMultiplierTerms
  fullName: VetMedData.NET.ProductMatching.NameCleaningConfig.RemoveLeadingMultiplierTerms
  type: Property
  source:
    remote:
      path: VetMedData.NET/ProductMatching/NameCleaningConfig.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: RemoveLeadingMultiplierTerms
    path: ProductMatching/NameCleaningConfig.cs
    startLine: 49
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.ProductMatching
  summary: "\nRemove numeric leading terms when followed by &quot;x&quot; or &quot;X&quot; along with\nthe x.\n"
  example: []
  syntax:
    content: public bool RemoveLeadingMultiplierTerms { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public Property RemoveLeadingMultiplierTerms As Boolean
  overload: VetMedData.NET.ProductMatching.NameCleaningConfig.RemoveLeadingMultiplierTerms*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: VetMedData.NET.ProductMatching
  commentId: N:VetMedData.NET.ProductMatching
  name: VetMedData.NET.ProductMatching
  nameWithType: VetMedData.NET.ProductMatching
  fullName: VetMedData.NET.ProductMatching
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VetMedData.NET.ProductMatching.NameCleaningConfig.Lowercase*
  commentId: Overload:VetMedData.NET.ProductMatching.NameCleaningConfig.Lowercase
  name: Lowercase
  nameWithType: NameCleaningConfig.Lowercase
  fullName: VetMedData.NET.ProductMatching.NameCleaningConfig.Lowercase
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: VetMedData.NET.ProductMatching.NameCleaningConfig.RemoveBracketedTerms*
  commentId: Overload:VetMedData.NET.ProductMatching.NameCleaningConfig.RemoveBracketedTerms
  name: RemoveBracketedTerms
  nameWithType: NameCleaningConfig.RemoveBracketedTerms
  fullName: VetMedData.NET.ProductMatching.NameCleaningConfig.RemoveBracketedTerms
- uid: VetMedData.NET.ProductMatching.NameCleaningConfig.CharsToRemove*
  commentId: Overload:VetMedData.NET.ProductMatching.NameCleaningConfig.CharsToRemove
  name: CharsToRemove
  nameWithType: NameCleaningConfig.CharsToRemove
  fullName: VetMedData.NET.ProductMatching.NameCleaningConfig.CharsToRemove
- uid: System.Char[]
  isExternal: true
  name: Char[]
  nameWithType: Char[]
  fullName: System.Char[]
  nameWithType.vb: Char()
  fullName.vb: System.Char()
  name.vb: Char()
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: System.Char
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: VetMedData.NET.ProductMatching.NameCleaningConfig.TermsToRemove*
  commentId: Overload:VetMedData.NET.ProductMatching.NameCleaningConfig.TermsToRemove
  name: TermsToRemove
  nameWithType: NameCleaningConfig.TermsToRemove
  fullName: VetMedData.NET.ProductMatching.NameCleaningConfig.TermsToRemove
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: VetMedData.NET.ProductMatching.NameCleaningConfig.PatternsToRemove*
  commentId: Overload:VetMedData.NET.ProductMatching.NameCleaningConfig.PatternsToRemove
  name: PatternsToRemove
  nameWithType: NameCleaningConfig.PatternsToRemove
  fullName: VetMedData.NET.ProductMatching.NameCleaningConfig.PatternsToRemove
- uid: VetMedData.NET.ProductMatching.NameCleaningConfig.RemoveLeadingMultiplierTerms*
  commentId: Overload:VetMedData.NET.ProductMatching.NameCleaningConfig.RemoveLeadingMultiplierTerms
  name: RemoveLeadingMultiplierTerms
  nameWithType: NameCleaningConfig.RemoveLeadingMultiplierTerms
  fullName: VetMedData.NET.ProductMatching.NameCleaningConfig.RemoveLeadingMultiplierTerms
