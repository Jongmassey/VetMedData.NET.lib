### YamlMime:ManagedReference
items:
- uid: VetMedData.NET.Model.VMDPID
  commentId: T:VetMedData.NET.Model.VMDPID
  id: VMDPID
  parent: VetMedData.NET.Model
  children:
  - VetMedData.NET.Model.VMDPID.ActiveSubstances
  - VetMedData.NET.Model.VMDPID.AllProducts
  - VetMedData.NET.Model.VMDPID.AuthorisationRoutes
  - VetMedData.NET.Model.VMDPID.CreatedDateTime
  - VetMedData.NET.Model.VMDPID.CurrentlyAuthorisedProducts
  - VetMedData.NET.Model.VMDPID.ExpiredProducts
  - VetMedData.NET.Model.VMDPID.HomoeopathicProducts
  - VetMedData.NET.Model.VMDPID.MAHolders
  - VetMedData.NET.Model.VMDPID.PharmaceuticalForms
  - VetMedData.NET.Model.VMDPID.RealProducts
  - VetMedData.NET.Model.VMDPID.SuspendedProducts
  - VetMedData.NET.Model.VMDPID.TargetSpecies
  - VetMedData.NET.Model.VMDPID.TherapeuticGroups
  langs:
  - csharp
  - vb
  name: VMDPID
  nameWithType: VMDPID
  fullName: VetMedData.NET.Model.VMDPID
  type: Class
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: VMDPID
    path: Model/VMDPID.cs
    startLine: 12
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  summary: "\nDefines structure of Product Information Database\nfrom Veterinary Medicines Directorate and provides\ndata access methods.\n"
  example: []
  syntax:
    content: >-
      [Serializable]

      public class VMDPID
    content.vb: >-
      <Serializable>

      Public Class VMDPID
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  attributes:
  - type: System.SerializableAttribute
    ctor: System.SerializableAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: VetMedData.NET.Model.VMDPID.CreatedDateTime
  commentId: P:VetMedData.NET.Model.VMDPID.CreatedDateTime
  id: CreatedDateTime
  parent: VetMedData.NET.Model.VMDPID
  langs:
  - csharp
  - vb
  name: CreatedDateTime
  nameWithType: VMDPID.CreatedDateTime
  fullName: VetMedData.NET.Model.VMDPID.CreatedDateTime
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: CreatedDateTime
    path: Model/VMDPID.cs
    startLine: 15
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public DateTime CreatedDateTime { get; set; }
    parameters: []
    return:
      type: System.DateTime
    content.vb: Public Property CreatedDateTime As Date
  overload: VetMedData.NET.Model.VMDPID.CreatedDateTime*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.Model.VMDPID.CurrentlyAuthorisedProducts
  commentId: P:VetMedData.NET.Model.VMDPID.CurrentlyAuthorisedProducts
  id: CurrentlyAuthorisedProducts
  parent: VetMedData.NET.Model.VMDPID
  langs:
  - csharp
  - vb
  name: CurrentlyAuthorisedProducts
  nameWithType: VMDPID.CurrentlyAuthorisedProducts
  fullName: VetMedData.NET.Model.VMDPID.CurrentlyAuthorisedProducts
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: CurrentlyAuthorisedProducts
    path: Model/VMDPID.cs
    startLine: 16
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public List<CurrentlyAuthorisedProduct> CurrentlyAuthorisedProducts { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{VetMedData.NET.Model.CurrentlyAuthorisedProduct}
    content.vb: Public Property CurrentlyAuthorisedProducts As List(Of CurrentlyAuthorisedProduct)
  overload: VetMedData.NET.Model.VMDPID.CurrentlyAuthorisedProducts*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.Model.VMDPID.SuspendedProducts
  commentId: P:VetMedData.NET.Model.VMDPID.SuspendedProducts
  id: SuspendedProducts
  parent: VetMedData.NET.Model.VMDPID
  langs:
  - csharp
  - vb
  name: SuspendedProducts
  nameWithType: VMDPID.SuspendedProducts
  fullName: VetMedData.NET.Model.VMDPID.SuspendedProducts
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: SuspendedProducts
    path: Model/VMDPID.cs
    startLine: 18
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public List<SuspendedProduct> SuspendedProducts { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{VetMedData.NET.Model.SuspendedProduct}
    content.vb: Public Property SuspendedProducts As List(Of SuspendedProduct)
  overload: VetMedData.NET.Model.VMDPID.SuspendedProducts*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.Model.VMDPID.ExpiredProducts
  commentId: P:VetMedData.NET.Model.VMDPID.ExpiredProducts
  id: ExpiredProducts
  parent: VetMedData.NET.Model.VMDPID
  langs:
  - csharp
  - vb
  name: ExpiredProducts
  nameWithType: VMDPID.ExpiredProducts
  fullName: VetMedData.NET.Model.VMDPID.ExpiredProducts
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: ExpiredProducts
    path: Model/VMDPID.cs
    startLine: 20
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public List<ExpiredProduct> ExpiredProducts { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{VetMedData.NET.Model.ExpiredProduct}
    content.vb: Public Property ExpiredProducts As List(Of ExpiredProduct)
  overload: VetMedData.NET.Model.VMDPID.ExpiredProducts*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.Model.VMDPID.HomoeopathicProducts
  commentId: P:VetMedData.NET.Model.VMDPID.HomoeopathicProducts
  id: HomoeopathicProducts
  parent: VetMedData.NET.Model.VMDPID
  langs:
  - csharp
  - vb
  name: HomoeopathicProducts
  nameWithType: VMDPID.HomoeopathicProducts
  fullName: VetMedData.NET.Model.VMDPID.HomoeopathicProducts
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: HomoeopathicProducts
    path: Model/VMDPID.cs
    startLine: 22
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  syntax:
    content: public List<HomoeopathicProduct> HomoeopathicProducts { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.List{VetMedData.NET.Model.HomoeopathicProduct}
    content.vb: Public Property HomoeopathicProducts As List(Of HomoeopathicProduct)
  overload: VetMedData.NET.Model.VMDPID.HomoeopathicProducts*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: VetMedData.NET.Model.VMDPID.AllProducts
  commentId: P:VetMedData.NET.Model.VMDPID.AllProducts
  id: AllProducts
  parent: VetMedData.NET.Model.VMDPID
  langs:
  - csharp
  - vb
  name: AllProducts
  nameWithType: VMDPID.AllProducts
  fullName: VetMedData.NET.Model.VMDPID.AllProducts
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: AllProducts
    path: Model/VMDPID.cs
    startLine: 28
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  summary: "\nUnions together all product types \n"
  example: []
  syntax:
    content: public IEnumerable<ReferenceProduct> AllProducts { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VetMedData.NET.Model.ReferenceProduct}
    content.vb: Public ReadOnly Property AllProducts As IEnumerable(Of ReferenceProduct)
  overload: VetMedData.NET.Model.VMDPID.AllProducts*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VetMedData.NET.Model.VMDPID.RealProducts
  commentId: P:VetMedData.NET.Model.VMDPID.RealProducts
  id: RealProducts
  parent: VetMedData.NET.Model.VMDPID
  langs:
  - csharp
  - vb
  name: RealProducts
  nameWithType: VMDPID.RealProducts
  fullName: VetMedData.NET.Model.VMDPID.RealProducts
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: RealProducts
    path: Model/VMDPID.cs
    startLine: 34
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  summary: "\nUnions together all product types except Homoeopathic\n"
  example: []
  syntax:
    content: public IEnumerable<ReferenceProduct> RealProducts { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{VetMedData.NET.Model.ReferenceProduct}
    content.vb: Public ReadOnly Property RealProducts As IEnumerable(Of ReferenceProduct)
  overload: VetMedData.NET.Model.VMDPID.RealProducts*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VetMedData.NET.Model.VMDPID.PharmaceuticalForms
  commentId: P:VetMedData.NET.Model.VMDPID.PharmaceuticalForms
  id: PharmaceuticalForms
  parent: VetMedData.NET.Model.VMDPID
  langs:
  - csharp
  - vb
  name: PharmaceuticalForms
  nameWithType: VMDPID.PharmaceuticalForms
  fullName: VetMedData.NET.Model.VMDPID.PharmaceuticalForms
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: PharmaceuticalForms
    path: Model/VMDPID.cs
    startLine: 41
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  summary: "\nUnique list of all Pharmaceutical Forms across all products\n"
  example: []
  syntax:
    content: public IEnumerable<string> PharmaceuticalForms { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property PharmaceuticalForms As IEnumerable(Of String)
  overload: VetMedData.NET.Model.VMDPID.PharmaceuticalForms*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VetMedData.NET.Model.VMDPID.MAHolders
  commentId: P:VetMedData.NET.Model.VMDPID.MAHolders
  id: MAHolders
  parent: VetMedData.NET.Model.VMDPID
  langs:
  - csharp
  - vb
  name: MAHolders
  nameWithType: VMDPID.MAHolders
  fullName: VetMedData.NET.Model.VMDPID.MAHolders
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: MAHolders
    path: Model/VMDPID.cs
    startLine: 49
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  summary: "\nUnique list of all MA Holders across all products\n"
  example: []
  syntax:
    content: public IEnumerable<string> MAHolders { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property MAHolders As IEnumerable(Of String)
  overload: VetMedData.NET.Model.VMDPID.MAHolders*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VetMedData.NET.Model.VMDPID.AuthorisationRoutes
  commentId: P:VetMedData.NET.Model.VMDPID.AuthorisationRoutes
  id: AuthorisationRoutes
  parent: VetMedData.NET.Model.VMDPID
  langs:
  - csharp
  - vb
  name: AuthorisationRoutes
  nameWithType: VMDPID.AuthorisationRoutes
  fullName: VetMedData.NET.Model.VMDPID.AuthorisationRoutes
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: AuthorisationRoutes
    path: Model/VMDPID.cs
    startLine: 58
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  summary: "\nUnique list of all Authorisation Routes across all products\n"
  example: []
  syntax:
    content: public IEnumerable<string> AuthorisationRoutes { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property AuthorisationRoutes As IEnumerable(Of String)
  overload: VetMedData.NET.Model.VMDPID.AuthorisationRoutes*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VetMedData.NET.Model.VMDPID.TherapeuticGroups
  commentId: P:VetMedData.NET.Model.VMDPID.TherapeuticGroups
  id: TherapeuticGroups
  parent: VetMedData.NET.Model.VMDPID
  langs:
  - csharp
  - vb
  name: TherapeuticGroups
  nameWithType: VMDPID.TherapeuticGroups
  fullName: VetMedData.NET.Model.VMDPID.TherapeuticGroups
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: TherapeuticGroups
    path: Model/VMDPID.cs
    startLine: 67
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  summary: "\nUnique list of all Therapeutic Groups across all products\n"
  example: []
  syntax:
    content: public IEnumerable<string> TherapeuticGroups { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property TherapeuticGroups As IEnumerable(Of String)
  overload: VetMedData.NET.Model.VMDPID.TherapeuticGroups*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VetMedData.NET.Model.VMDPID.ActiveSubstances
  commentId: P:VetMedData.NET.Model.VMDPID.ActiveSubstances
  id: ActiveSubstances
  parent: VetMedData.NET.Model.VMDPID
  langs:
  - csharp
  - vb
  name: ActiveSubstances
  nameWithType: VMDPID.ActiveSubstances
  fullName: VetMedData.NET.Model.VMDPID.ActiveSubstances
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: ActiveSubstances
    path: Model/VMDPID.cs
    startLine: 75
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  summary: "\nUnique list of all Active Substances across all products\n"
  example: []
  syntax:
    content: public IEnumerable<string> ActiveSubstances { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property ActiveSubstances As IEnumerable(Of String)
  overload: VetMedData.NET.Model.VMDPID.ActiveSubstances*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: VetMedData.NET.Model.VMDPID.TargetSpecies
  commentId: P:VetMedData.NET.Model.VMDPID.TargetSpecies
  id: TargetSpecies
  parent: VetMedData.NET.Model.VMDPID
  langs:
  - csharp
  - vb
  name: TargetSpecies
  nameWithType: VMDPID.TargetSpecies
  fullName: VetMedData.NET.Model.VMDPID.TargetSpecies
  type: Property
  source:
    remote:
      path: VetMedData.NET/Model/VMDPID.cs
      branch: master
      repo: https://github.com/Jongmassey/VetMedData.NET.git
    id: TargetSpecies
    path: Model/VMDPID.cs
    startLine: 84
  assemblies:
  - VetMedData.NET
  namespace: VetMedData.NET.Model
  summary: "\nUnique list of all Target Species across all products\n"
  example: []
  syntax:
    content: public IEnumerable<string> TargetSpecies { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
    content.vb: Public ReadOnly Property TargetSpecies As IEnumerable(Of String)
  overload: VetMedData.NET.Model.VMDPID.TargetSpecies*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: VetMedData.NET.Model
  commentId: N:VetMedData.NET.Model
  name: VetMedData.NET.Model
  nameWithType: VetMedData.NET.Model
  fullName: VetMedData.NET.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: VetMedData.NET.Model.VMDPID.CreatedDateTime*
  commentId: Overload:VetMedData.NET.Model.VMDPID.CreatedDateTime
  name: CreatedDateTime
  nameWithType: VMDPID.CreatedDateTime
  fullName: VetMedData.NET.Model.VMDPID.CreatedDateTime
- uid: System.DateTime
  commentId: T:System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: VetMedData.NET.Model.VMDPID.CurrentlyAuthorisedProducts*
  commentId: Overload:VetMedData.NET.Model.VMDPID.CurrentlyAuthorisedProducts
  name: CurrentlyAuthorisedProducts
  nameWithType: VMDPID.CurrentlyAuthorisedProducts
  fullName: VetMedData.NET.Model.VMDPID.CurrentlyAuthorisedProducts
- uid: System.Collections.Generic.List{VetMedData.NET.Model.CurrentlyAuthorisedProduct}
  commentId: T:System.Collections.Generic.List{VetMedData.NET.Model.CurrentlyAuthorisedProduct}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<CurrentlyAuthorisedProduct>
  nameWithType: List<CurrentlyAuthorisedProduct>
  fullName: System.Collections.Generic.List<VetMedData.NET.Model.CurrentlyAuthorisedProduct>
  nameWithType.vb: List(Of CurrentlyAuthorisedProduct)
  fullName.vb: System.Collections.Generic.List(Of VetMedData.NET.Model.CurrentlyAuthorisedProduct)
  name.vb: List(Of CurrentlyAuthorisedProduct)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VetMedData.NET.Model.CurrentlyAuthorisedProduct
    name: CurrentlyAuthorisedProduct
    nameWithType: CurrentlyAuthorisedProduct
    fullName: VetMedData.NET.Model.CurrentlyAuthorisedProduct
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VetMedData.NET.Model.CurrentlyAuthorisedProduct
    name: CurrentlyAuthorisedProduct
    nameWithType: CurrentlyAuthorisedProduct
    fullName: VetMedData.NET.Model.CurrentlyAuthorisedProduct
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: VetMedData.NET.Model.VMDPID.SuspendedProducts*
  commentId: Overload:VetMedData.NET.Model.VMDPID.SuspendedProducts
  name: SuspendedProducts
  nameWithType: VMDPID.SuspendedProducts
  fullName: VetMedData.NET.Model.VMDPID.SuspendedProducts
- uid: System.Collections.Generic.List{VetMedData.NET.Model.SuspendedProduct}
  commentId: T:System.Collections.Generic.List{VetMedData.NET.Model.SuspendedProduct}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<SuspendedProduct>
  nameWithType: List<SuspendedProduct>
  fullName: System.Collections.Generic.List<VetMedData.NET.Model.SuspendedProduct>
  nameWithType.vb: List(Of SuspendedProduct)
  fullName.vb: System.Collections.Generic.List(Of VetMedData.NET.Model.SuspendedProduct)
  name.vb: List(Of SuspendedProduct)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VetMedData.NET.Model.SuspendedProduct
    name: SuspendedProduct
    nameWithType: SuspendedProduct
    fullName: VetMedData.NET.Model.SuspendedProduct
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VetMedData.NET.Model.SuspendedProduct
    name: SuspendedProduct
    nameWithType: SuspendedProduct
    fullName: VetMedData.NET.Model.SuspendedProduct
  - name: )
    nameWithType: )
    fullName: )
- uid: VetMedData.NET.Model.VMDPID.ExpiredProducts*
  commentId: Overload:VetMedData.NET.Model.VMDPID.ExpiredProducts
  name: ExpiredProducts
  nameWithType: VMDPID.ExpiredProducts
  fullName: VetMedData.NET.Model.VMDPID.ExpiredProducts
- uid: System.Collections.Generic.List{VetMedData.NET.Model.ExpiredProduct}
  commentId: T:System.Collections.Generic.List{VetMedData.NET.Model.ExpiredProduct}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ExpiredProduct>
  nameWithType: List<ExpiredProduct>
  fullName: System.Collections.Generic.List<VetMedData.NET.Model.ExpiredProduct>
  nameWithType.vb: List(Of ExpiredProduct)
  fullName.vb: System.Collections.Generic.List(Of VetMedData.NET.Model.ExpiredProduct)
  name.vb: List(Of ExpiredProduct)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VetMedData.NET.Model.ExpiredProduct
    name: ExpiredProduct
    nameWithType: ExpiredProduct
    fullName: VetMedData.NET.Model.ExpiredProduct
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VetMedData.NET.Model.ExpiredProduct
    name: ExpiredProduct
    nameWithType: ExpiredProduct
    fullName: VetMedData.NET.Model.ExpiredProduct
  - name: )
    nameWithType: )
    fullName: )
- uid: VetMedData.NET.Model.VMDPID.HomoeopathicProducts*
  commentId: Overload:VetMedData.NET.Model.VMDPID.HomoeopathicProducts
  name: HomoeopathicProducts
  nameWithType: VMDPID.HomoeopathicProducts
  fullName: VetMedData.NET.Model.VMDPID.HomoeopathicProducts
- uid: System.Collections.Generic.List{VetMedData.NET.Model.HomoeopathicProduct}
  commentId: T:System.Collections.Generic.List{VetMedData.NET.Model.HomoeopathicProduct}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<HomoeopathicProduct>
  nameWithType: List<HomoeopathicProduct>
  fullName: System.Collections.Generic.List<VetMedData.NET.Model.HomoeopathicProduct>
  nameWithType.vb: List(Of HomoeopathicProduct)
  fullName.vb: System.Collections.Generic.List(Of VetMedData.NET.Model.HomoeopathicProduct)
  name.vb: List(Of HomoeopathicProduct)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VetMedData.NET.Model.HomoeopathicProduct
    name: HomoeopathicProduct
    nameWithType: HomoeopathicProduct
    fullName: VetMedData.NET.Model.HomoeopathicProduct
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VetMedData.NET.Model.HomoeopathicProduct
    name: HomoeopathicProduct
    nameWithType: HomoeopathicProduct
    fullName: VetMedData.NET.Model.HomoeopathicProduct
  - name: )
    nameWithType: )
    fullName: )
- uid: VetMedData.NET.Model.VMDPID.AllProducts*
  commentId: Overload:VetMedData.NET.Model.VMDPID.AllProducts
  name: AllProducts
  nameWithType: VMDPID.AllProducts
  fullName: VetMedData.NET.Model.VMDPID.AllProducts
- uid: System.Collections.Generic.IEnumerable{VetMedData.NET.Model.ReferenceProduct}
  commentId: T:System.Collections.Generic.IEnumerable{VetMedData.NET.Model.ReferenceProduct}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ReferenceProduct>
  nameWithType: IEnumerable<ReferenceProduct>
  fullName: System.Collections.Generic.IEnumerable<VetMedData.NET.Model.ReferenceProduct>
  nameWithType.vb: IEnumerable(Of ReferenceProduct)
  fullName.vb: System.Collections.Generic.IEnumerable(Of VetMedData.NET.Model.ReferenceProduct)
  name.vb: IEnumerable(Of ReferenceProduct)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: VetMedData.NET.Model.ReferenceProduct
    name: ReferenceProduct
    nameWithType: ReferenceProduct
    fullName: VetMedData.NET.Model.ReferenceProduct
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: VetMedData.NET.Model.ReferenceProduct
    name: ReferenceProduct
    nameWithType: ReferenceProduct
    fullName: VetMedData.NET.Model.ReferenceProduct
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: VetMedData.NET.Model.VMDPID.RealProducts*
  commentId: Overload:VetMedData.NET.Model.VMDPID.RealProducts
  name: RealProducts
  nameWithType: VMDPID.RealProducts
  fullName: VetMedData.NET.Model.VMDPID.RealProducts
- uid: VetMedData.NET.Model.VMDPID.PharmaceuticalForms*
  commentId: Overload:VetMedData.NET.Model.VMDPID.PharmaceuticalForms
  name: PharmaceuticalForms
  nameWithType: VMDPID.PharmaceuticalForms
  fullName: VetMedData.NET.Model.VMDPID.PharmaceuticalForms
- uid: System.Collections.Generic.IEnumerable{System.String}
  commentId: T:System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  nameWithType.vb: IEnumerable(Of String)
  fullName.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: VetMedData.NET.Model.VMDPID.MAHolders*
  commentId: Overload:VetMedData.NET.Model.VMDPID.MAHolders
  name: MAHolders
  nameWithType: VMDPID.MAHolders
  fullName: VetMedData.NET.Model.VMDPID.MAHolders
- uid: VetMedData.NET.Model.VMDPID.AuthorisationRoutes*
  commentId: Overload:VetMedData.NET.Model.VMDPID.AuthorisationRoutes
  name: AuthorisationRoutes
  nameWithType: VMDPID.AuthorisationRoutes
  fullName: VetMedData.NET.Model.VMDPID.AuthorisationRoutes
- uid: VetMedData.NET.Model.VMDPID.TherapeuticGroups*
  commentId: Overload:VetMedData.NET.Model.VMDPID.TherapeuticGroups
  name: TherapeuticGroups
  nameWithType: VMDPID.TherapeuticGroups
  fullName: VetMedData.NET.Model.VMDPID.TherapeuticGroups
- uid: VetMedData.NET.Model.VMDPID.ActiveSubstances*
  commentId: Overload:VetMedData.NET.Model.VMDPID.ActiveSubstances
  name: ActiveSubstances
  nameWithType: VMDPID.ActiveSubstances
  fullName: VetMedData.NET.Model.VMDPID.ActiveSubstances
- uid: VetMedData.NET.Model.VMDPID.TargetSpecies*
  commentId: Overload:VetMedData.NET.Model.VMDPID.TargetSpecies
  name: TargetSpecies
  nameWithType: VMDPID.TargetSpecies
  fullName: VetMedData.NET.Model.VMDPID.TargetSpecies
